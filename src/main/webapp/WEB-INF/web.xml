<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://xmlns.jcp.org/xml/ns/javaee" xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd" version="4.0">  
  <display-name>HelloServlets</display-name>
  <welcome-file-list>
    <welcome-file>index.html</welcome-file>
    <welcome-file>index.htm</welcome-file>
    <welcome-file>index.jsp</welcome-file>
    <welcome-file>default.html</welcome-file>
    <welcome-file>default.htm</welcome-file>
    <welcome-file>default.jsp</welcome-file>
  </welcome-file-list>
  <!-- welcome files? -->
  <!--  we can create a base html file and name it any of these things -->
  <!-- when we hit the main endpoint of our program with a GET request, it'll return that file as a view. -->
  
  <!-- This is where we'll define our servlets, so that tomcat is aware of where the servlet is and how to use it -->
  <!-- You WILLLL be expected to know all these tags and what they're for (besides maybe description lol) -->
  
  <!-- This defines our servlet in the deployment descriptor -->
  <servlet>
  	<display-name>HelloServlet</display-name>
  	<servlet-name>HelloServlet</servlet-name>
  	<servlet-class>com.revature.servlets.HelloServlet</servlet-class>
   </servlet>
  
  <!-- This is will map the above servlet to a URL location. The URL pattern is added to the base URL of the application. -->
  <servlet-mapping>
  	<servlet-name>HelloServlet</servlet-name>
  	<url-pattern>/hello</url-pattern>
  </servlet-mapping>
  
  <!-- So if I send a request to my application's URL + /hello, it'll call the HelloServlet -->
  <!-- The URL in the case of this application can be found when you run on server! Try it on postman too -->
  
</web-app>